name: CI Pipeline for PRs to main

on:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write

env:
  DBT_PROFILES_DIR: ./
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PROD_USER: ${{ secrets.POSTGRES_PROD_USER }}
  POSTGRES_PROD_PW: ${{ secrets.POSTGRES_PROD_PW }}
  POSTGRES_DEV_USER: ${{ secrets.POSTGRES_DEV_USER }}
  POSTGRES_DEV_PW: ${{ secrets.POSTGRES_DEV_PW }}
  POSTGRES_CI_SCHEMA: "${{ format('{0}_{1}', 'ci_pr', github.event.number) }}"

jobs:
  lint-models:
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the dependencies
        run: uv sync

      - name: Get changed files
        id: get_changed_files
        run: |
          git fetch origin main
          main_sha=$(git rev-parse origin/main)
          echo "changed_files=$(git diff --diff-filter=d --no-commit-id --name-only -r $main_sha... | grep "\.sql$" | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Lint dbt models
        if: steps.get_changed_files.outputs.changed_files != ''
        run: |
          echo "Linting:" ${{ steps.get_changed_files.outputs.changed_files }}
          uv run sqlfluff lint ${{ steps.get_changed_files.outputs.changed_files }} --ignore templating

  slim-ci:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - uses: "actions/checkout@v2"

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the dependencies
        run: uv sync

      - name: Grab manifest and catalog from S3
        run: | 
          aws s3 cp ${{ secrets.AWS_BUCKET_URL }}/manifest.json ./target-base/manifest.json
          aws s3 cp ${{ secrets.AWS_BUCKET_URL }}/catalog.json ./target-base/catalog.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1

      - name: Run dbt build (Slim CI)
        run: |
          uv run dbt deps
          uv run dbt build --select state:modified+1 --exclude duckdb --defer --state ./target-base --target ci --target-path target
          uv run dbt docs generate --target ci --target-path target

      - name: Run Recce
        run: |
          uv run recce run --github-pull-request-url ${{ github.event.pull_request.html_url }} --target-path target --target-base-path target-base

      - name: Upload Recce State File
        uses: actions/upload-artifact@v4
        id: recce-artifact-uploader
        with:
          name: recce-state-file
          path: recce_state.json

      - name: Prepare Recce Summary
        id: recce-summary
        run: |
          uv run recce summary recce_state.json > recce_summary.md
          cat recce_summary.md >> $GITHUB_STEP_SUMMARY
          echo '${{ env.NEXT_STEP_MESSAGE }}' >> recce_summary.md

          # Handle the case when the recce summary is too long to be displayed in the GitHub PR comment
          if [[ `wc -c recce_summary.md | awk '{print $1}'` -ge '65535' ]]; then
            echo '# Recce Summary
          The recce summary is too long to be displayed in the GitHub PR comment.
          Please check the summary detail in the [Job Summary](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}) page.
          ${{ env.NEXT_STEP_MESSAGE }}' > recce_summary.md
          fi

        env:
          NEXT_STEP_MESSAGE: |
            ## Next Steps
            If you want to check more detail information about the recce result, please download the [artifact](${{ steps.recce-artifact-uploader.outputs.artifact-url }}) file and open it by [Recce](https://pypi.org/project/recce/) CLI.

            ### How to check the recce result
            ```bash
            # Unzip the downloaded artifact file
            tar -xf recce-state-file.zip

            # Launch the recce server based on the state file
            recce server --review recce_state.json

            # Open the recce server http://localhost:8000 by your browser
            ```

      - name: Comment on pull request
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: recce_summary.md
          comment_tag: recce
